#summary Plan of action for testing
#labels Phase-QA
<wiki:toc max_depth="3" />



== Past/Existing Tests ==
There are currently no existing tests made for the game Luminance.
We will be making the tests from ground up as with the development team
except there will be no bases to work on.

== Testing Concept ==
The whole testing suite will be a project in and of itself with packages inside differentiating each test component.

eg
<br>
Test Suite --> testGraphics --> testCube.java
<br>
Test Suite --> testGameLogic --> testAI.java
<br>
Test Suite --> testHook --> testSmoke.java

This will make it easy for the daily build to just run inside the eclipse IDE and go through its full steps as it automatically associates and runs. Whats more, the Android SDK uses ant script for its builds and test builds so this can be implemented into the Team City server where a target specifying the testHook package will only be invoked instead of the whole Test Suite.

*Note:* Because Robotium is unknown to us at this moment, it is unsure of whether or not it can be included into the package.

Furthermore, the ant build will have a file defined as a success scenario where a diff command will be used to test the output of the testHook package. The output of a test, when invoked via command-line, will output to STDOUT. Should any errors be made, the script will then tell the user that the build has failed and reject the commit. A summary of the tests that have failed will be given to the end-committer.

The main (and recommended) technologies to be used are Robotium and JUnit for Android. Robotium is essentially built for Android GUI testing and JUnit is recommended by Android's site.

=== Work Schedule ===
  Smoke test - high priority
  Black box tests - high priority in concert with dev. team
  White box tests - med priority
  Unit test - med priority
  
  Note: add on - jeff

== Daily Build ==
The build master will run the test suite on eclipse and verify its success via the pop-up window status given in eclipse. Should a few errors occur, A bug report will be issued and taken up by the triage. Should the majority of the project fail then either an emergency meeting is in order or a very high alert report followed by an emergency e-mail to see the problem through thoroughly.

== Milestone 1: Documentation & Concept smoke test ==
The discussion and writing of this documentation and planning of smoke test.
=== Tasks ===
  * Write-up of Documentation
  * Divide up Test Components

*Estimated: 2-3 hours*

<br>
== Milestone 2: Smoke test, All core tests done, paired up with developers ==
Division of labour, Working smoke test, Finished suite of core tests

=== Tasks ===
  * Know how to make an Ant Script
  * Write Milestone 2 black box tests simultaneously with development
  * Write Milestone 2 white box tests after development of components
  * Write Milestone 2 mutation tests for each component developed
  * Write Milestone 2 GUI testing(Robotium)simultaneously with dev.
  * Integrate black box, white box, mutation test into smoke test

*Estimated: 40 hours*

<br>
== Milestone 3: Test new features, User test ==
Get feedback from real life testing on core game without features

*Estimated: 35 hours*

<br>
== Milestone 4: User test, Test new features, Possible hardware test ==
Get feedback from real life testing on Milestone 3’s added features

*Estimated: 35 hours*

<br>
== Milestone 5: Thorough Run-through of all tests, Flush out bugs ==
Make sure everything works

*Estimated: 15 hours*

<br>
*Note: Estimates are total spent by whole group*

== Division of Labour: ==
It has been discussed that the team will divide up the major testing (unit test) portion into sub    categories. This is in coalition with the development group’s choice of dividing their work. This will keep each member’s knowledge of the project narrow but thoroughly understandable. Some will have more than one job depending on their ease of testing. Below is a table of division:

||Name||Job||
||Liang||Engine||
||Jiajing||Graphics||
||Kai||Input||
||Amara||Game Logic||
||All||Smoke Test||

||Engine||


example categories: graphics, input, engine, logic
NOTE: Make better - Jeff reminder

== Technologies Used ==
  * Android JUnit
    Run Regression, Unit tests
  * Robotium
    Run Gui based tests
  * Google Code
    Code Base
  * Ant Script
    Build script, Smoke test, Hooks
  * Team City
    Smoke test, Hooks
  * Emma
   Code Coverage

Links:
  * Robotium  http://code.google.com/p/robotium/
  * Android  http://developer.android.com/guide/developing/testing/testing_eclipse.html
  * Emma http://emma.sourceforge.net/

== Test Summary ==
=== Smoke test ===
This has been determined to only cover basic method testing as discussion of a first level play through might take too long. There would be no point in waiting for a commit that takes 10 minutes long. This will take a bit longer to understand as Team City, Ant Script and Shell scripting are needed to run in collaboration with the Android Virtual Device. It will be built on the Team City server, check basic methods and menus and, depending on time taken, might play through first level.

=== Black Box ===
Using the class diagrams and function/method stubs, the test team will be making black box test cases for their respective parts. This will be made in parallel with the development team as asking them to wait will not bode well because time is an issue. Thus, the test will be ran when the section of code is committed. 

=== White Box ===
Will be implemented after the Black Box Testing has been passed. It will include basics such as mutation testing and, if possible, path testing. This will run through from either a method or a whole run-through of a level(s).

=== Unit Test: ===
Will be used in Eclipse IDE’s built-in to run the majority of the test suites. 

=== GUI Test: ===
Android specific Robotium GUI tester will be used in accordance with a user use scenario. GUI test would performing a series of functions needed to pass the first level of the game. GUI test will be written and automated and run by testers.

== Testing results format: ==
What will eventually be printed out as a result of running tests.
!TestPackage | “Short description” | !MethodName | Passed/Failed

== Defect/Bug Reports: ==
These will follow in with the formatting given to us by Google Code. They will also be issued through Google Code.

== Usability Test Reports: ==
A sheet given to testers when testing on a real device. This will include both members and non-members of team1. It will contain basics(see below. Bugs will be converted into official bug reports by testers and assigned to developer by Triage:



Level:
List the steps to reproduce the bug:

1

2

3

Rating of Game:

  Logic(game premise):

  Camera(viewing angle):

  Audio(music/effects):

  Performance(responsiveness):

  Interface(looks):

  Overall:

New feature ideas to help make the game better:

Old features you would like to see improved.(in what way):

Comments: