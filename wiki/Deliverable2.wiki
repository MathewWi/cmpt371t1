#summary Outline of the requirements for Milestone 2
<wiki:toc max_depth="1" />

= Code Requirements =
 == Source Code Repository ==
  Source code for Luminance for this milestone can be found here:
  [http://code.google.com/p/cmpt371t1/source/checkout]

 == Version Control Strategy ==
  Our version control strategy has esstentially remained the same throughout this milestone from the last.  Developers are to commit their classes with stubbed out methods - including pre-conditions, post-conditions, parameter explanations, etc - before doing any hardcore development.  In this fashion, the test team is then able to start writing unit tests on this stubbed out code, therefore making out whole software development process more efficient.

 == Daily Build ==
  A daily build is run on !TeamCity to ensure the continuing quality of the software.  It sends and email to every group member when there is an unsuccessful build.  It also prevents committing of code that breaks the build.  This is riding on the notion of fixing bugs on existing functionality before continuing development.
 == Smoke Test, Testing and Hooks ==
  All testing documentation can be viewed here: TestPlan

= Mini-Milestone List =
 The updated project plan we have set and the CPM diagram can be viewed here:  MilestonePlan

= Risk Analysis =
 The updated risk report can be viewed at: RiskReport

= Requirements =
 Updated requirements can be viewed at: [Requirements]

= Team Roles and Activity Log =
 The team roles can be found at: http://code.google.com/p/cmpt371t1/people/list

 The activity log can be viewed at: ProjectMemberTime

= Code Reviews =
 The code review process is documented at CodeReviewProcess.
 
 Code reviews are documented at CodeReviews.
 
= Refinement of our Software Development Process =
 Given what our group has gone through, we have worked hard to improve our downfalls in the following ways:
 * Enhanced communication.
  * Discuss as a group what changes are going to be made.
  * More open discussion in group meetings, rather than one person leading the whole thing
  * Overall whole group more readily available to communication while developing (i.e. working together, being on instant messaging or cell phones etc.)
  
 * Enhanced collaboration.
  * Separate team meetings for specific discussions.
  * Collaborate as a whole group to solve integration and system issues.
  * Communicate with outside parties (i.e. TA's, professors, etc.) for additional help where required.

 * Improved division of labour.
  * No longer relying on one person to do it all.
  * Have a development lead that is separate from project manager.

 * Improved chain of command.
  * More defined developer lead position and project manager positions.
   * Project manager runs overall project development
   * Development lead divides development tasks between the development team.
   * Test Team lead divides up testing tasks to their team.
   * Odd jobs divided up during meetings, so one person doesn't have to do them all.
  

 * Game oriented testing.
  * Challenges of game testing.
  * Focus is on black box / play testing.
  * Tests written as code stubs are created.

= Current State of the System =
 * Resource Manager.
  * Capable of loading and managing most resources.
  * Sound.
 * Input.
  * Touch, Drag.
 * Graphics.
  * Basic primitives (sphere, box, etc.).
 * Game.
  *Draws a grid and loads a level.

= Initial Analysis for Deliverable 3 =
 == Deliverable plan ==
 Any project artifacts that were modified or created since the first two milestones will be part of Deliverable 3:

   * Updated Risk Report - Includes an updated analysis of previous risks, as well as new risks that have been introduced
   * Version Control Strategy - How to ensure that developers do not commit code that will compromise the build.
   * GUI Test Suite - Continuing work with Robotium.
   * jUnit Test Suite - Continuing work with the unit test suite.
   * jCoverage Test Suite - The code coverage test suite.
   * Software Quality - The latest measurements of quality using code reviews.

 In addition, the following implementation-specific tasks are anticipated:
  * Alpha Version Complete - A working alpha version of the game should be complete.
  * Level Format - The game level format will be analyzed and implemented.
  * Sounds, special effects, lighting complete.
  * Multiple playable levels.
  * Random level generator.
  * Game Level Editor - A tool to create new game levels.


 == Estimate of size and time ==
|| *Task* || *Estimate time (hours)* ||
|| Full Alpha version of game || 24 ||
|| Continuing Robotium test suite || 8 ||
|| Continuing jUnit test suite || 8 ||
|| jCoverage test suite || 8 ||
|| Code Reviews || 6 ||
|| Level Format || 8 ||
|| Sounds, special effects, lighting || 10 ||
|| Multiple levels || 8 ||
|| Random Level Generator || 12 ||